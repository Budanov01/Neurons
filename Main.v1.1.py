from Neuron import Neuron

# Нумерация элементов семисегментного индикатора
#     1_
#   6|7_|2
#   5|__|3
#     4
# Матрица возможных входов, где строка обозначает одно значени, последнее значение - мнимый вход который
# перемножается смещение функции
x_matrix = [
    [1, 1, 1, 1, 1, 1, 0, 1],
    [0, 1, 1, 0, 0, 0, 0, 1],
    [1, 1, 0, 1, 1, 0, 1, 1],
    [1, 1, 1, 1, 0, 0, 1, 1],
    [0, 1, 1, 0, 0, 1, 1, 1],
    [1, 0, 1, 1, 0, 1, 1, 1],
    [1, 0, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 0, 1, 1, 1],
]

# Матрица возможных значений скрытого слоя
hidden_layer_out = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]

dictionary = {
    0: x_matrix[0],
    1: x_matrix[1],
    2: x_matrix[2],
    3: x_matrix[3],
    4: x_matrix[4],
    5: x_matrix[5],
    6: x_matrix[6],
    7: x_matrix[7],
    8: x_matrix[8],
    9: x_matrix[9]
}

# Вектор целевых значений нейрона
t_vector = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]

age = 2000  # Колличество эпох
n = 0.1  # Скорость обучения


def hidden_layer():
    layer = []
    for vector in t_vector:
        neuron = Neuron(x_matrix, vector, [0, 0, 0, 0, 0, 0, 0, 0], age, n)
        neuron.learning()
        layer.append(neuron)
    return layer


out_neuron = Neuron(hidden_layer_out, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], age, n)
out_neuron.learning()

network = hidden_layer()

try:
    print('Какая цифра загорелась на семисегментном индикаторе ?\n'
          'p.s Сеть может реагировать только на одноразрядные числа.')
    while True:
        number = input("Num = ")
        number.isdigit()
        xx = dictionary[int(number)]

        # Значения нейронов, порядок нейронов - neuron0, neuron1, ... , neuron9
        result = []
        for neuron in network:
            result.append(round(neuron.reaction(xx), 2))
        print("Значения скрытого слоя = " + str(result))

        # Добавляем значение мнимого входа
        result.append(1)
        print("Значение сети (1 - цифра распознана, 0 - не р-а) - " + str(round(out_neuron.reaction(result), 2)))
except Exception:
    print("Поздравляю ! У вас неправильно работает индикаторю")
